use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Error {
    /// The server error code returned
    code: Option<i32>,
    /// The error message generated by the server
    message: Option<String>,
}

impl Error {
    pub fn set_code(&mut self, code: i32) {
        self.code = Some(code);
    }

    pub fn with_code(mut self, code: i32) -> Error {
        self.code = Some(code);
        self
    }

    pub fn code(&self) -> Option<&i32> {
        self.code.as_ref()
    }

    pub fn reset_code(&mut self) {
        self.code = None;
    }

    pub fn set_message(&mut self, message: String) {
        self.message = Some(message);
    }

    pub fn with_message(mut self, message: String) -> Error {
        self.message = Some(message);
        self
    }

    pub fn message(&self) -> Option<&String> {
        self.message.as_ref()
    }

    pub fn reset_message(&mut self) {
        self.message = None;
    }
}
